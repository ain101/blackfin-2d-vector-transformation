
The goal of this project is to efficiently implement a coordinate
transform of a 2-D vector (x_1, y_1) into a second coordinate system
that is rotated and translated as against the original coordinate system
in 16 bit fixed point with a fixed point format of <1,10,5> ( one sign
bit, 10 pre-comma bits and 5 post-comma bits). Both the original vector
and the new coordinate system are given as variables.


I chose to implement this with complex numbers, because I noticed the gnu 
compiler has special builtin functions like "__builtin_bfin_cmplx_mul()". I 
assume this is be the best implementation, so there is nothing to gain from 
coding it in assembler. (see also "transform.txt")

transform() is not designed to be used with euler angels.

I tested a couple values by hand. 
It would make sense to test this code against another well tested transform() 
function.


This design should be fast because it utilizes builtin functions for rotation 
and translation. 
